package main

import (
	"fmt"
	"sophie"
	"os"
	"strings"
	"unicode"
	"strconv"
	// "github.com/aws/aws-sdk-go/service/s3"
	// "github.com/aws/aws-sdk-go/aws"
 	// "github.com/aws/aws-sdk-go/aws/session"
    //"github.com/aws/aws-sdk-go/service/s3/s3manager"
    //"log"
	//"panel"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a sophie.KeyValue.
func mapF(document string, value string) (res []sophie.KeyValue) {
	// TODO: you have to write this function

	f := func (c rune) bool  {
        	return !unicode.IsLetter(c) && !unicode.IsNumber(c)
    	}

	words := strings.FieldsFunc(value, f)
    	for _, w := range words {
        	kv := sophie.KeyValue {w, ""}
        	res = append(res, kv)
    	}

    	return
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// TODO: you also have to write this function
	return strconv.Itoa(len(values))
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		//var mr *sophie.Master
		fmt.Println(os.Args[2])
		if os.Args[2] == "sequential" {
			//mr = sophie.Sequential("wcseq", sophie.GetKeys(os.Args[3]), 3, mapF, reduceF) // os.Args[3:]
			sophie.Sequential("wcseq", sophie.GetKeys(os.Args[3]), 3, mapF, reduceF) // os.Args[3:]

		} else {
			//mr = sophie.Distributed("wc_distributed", sophie.GetKeys(os.Args[3]), 3, os.Args[2]) // os.Args[3:]
			sophie.Distributed("wc_distributed", sophie.GetKeys(os.Args[3]), 3, os.Args[2]) // os.Args[3:]
		}
		//panel.StartServer(mr)
		//mr.Wait()
	} else {
		sophie.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100000)
	}


}
